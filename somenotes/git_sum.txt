# install git

# git login github
# generate a two keys, private and public, your login email?? hope so
# and it will be in ssh cache, if don't want to input password, just don't input when create
ssh-keygen -t rsa -C "mail address"
# pacman -S openssh

#  not  nesersary? add key to ssh-agent
eval "$(ssh-agent -s)"
> here will show process' pid
# ssh-add /home/cooler/.ssh/git
ssh-add ~/.ssh/id_ras  # add you key, not pub
# ssh-add -l list  key  -d delete key -D delete all key

# 如果用的保留的密钥，下面步骤要过一次
# chmod 0600 /home/cooler/.ssh/git
# chmod 0644 /home/cooler/.ssh/git.pub
# copy public key's content to github ssh key
# test connection
ssh -T git@github.com
# global configuration
git config --global user.email "mail address"
git config --global user.name "login name"
# 如果配置好了ssh key, git操作还是提升登录， 很可能是用https拉取的代码，执行一下步骤
## START
git remote remove origin
git remote add origin git@github.com:username/proj_name.git
# 需要先拉取一次，再执行下面步骤
git pull origin master
git branch --set-upstream-to=origin/master master
## END

# get sources
git clone (ssh/https)_xxx.git / git remote add origin git@github:name/project.git

# check status
git status
# update sources
git pull origin xxx (fetch and merge)
# check branch
git branch
# create local branch
git branch lcbranch
## git branch -D branch # force
## git branch -d branch
# switch to localbranch
git checkout lcbranch
# stash new changes
git stash
## git stash list
## git stash pop stash@{0}
# merge new sources to local branch from master , pull new source then merge is good
git merge origin master
# add new file to cache arear
git add newfile
# commit added file to index branch
git commit -m "message"
# push to branches
git push origin branch
## git push --delete origin branch # delete remote branch
# recover  changes, including git add (but not commit)
git reset HEAD file
git checkout file
# difference of a file from old to the modification
git diff file
# rm a file, oppositive with add( no it's commit)
git rm file
# for github fork a branck and sync
# address must be git's ssh url git@url:project
git remote add your_new_tag_name  git@github.com:project/name.git (googlehosts/hosts.git)
# git remote add googlehosts git@github.com:googlehosts/hosts.git
git remote -v # checkt remote branc
git fetch your_new_tag_name # sync the remote branch to local
git merge your_new_tag_name/master # merge remote branch to master
	# just like: git checkout master
		     git merge your_new_tag_name
git push   # push to you github branch
